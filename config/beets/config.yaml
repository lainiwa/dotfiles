# Dependencies
#   pipx install 'git+https://github.com/beetbox/beets#egg=beets[chroma,fetchart,lyrics,lastgenre,scrub,thumbnails,web,discogs]'
#   sudo apt install libchromaprint-tools ffmpeg mp3val flac

directory: ~/music
library: ~/data/musiclibrary.db


import:
    # Either skip, keep, remove, merge or ask.
    # Controls how duplicates are treated in import task.
    # "skip" means that new item(album or track) will be skipped;
    # "keep" means keep both old and new items;
    # "remove" means remove old item;
    # "merge" means merge into one album;
    # "ask" means the user should be prompted for the action each time.
    # The default is ask.
    duplicate_action: skip
    # Either yes or no, indicating whether to move files into the library directory
    # when using beet import.
    # Defaults to no.
    #
    # The effect is similar to the copy option but you end up
    # with only one copy of the imported file.
    # ("Moving" works even across filesystems; if necessary, beets will copy and
    # then delete when a simple rename is impossible.)
    # Moving files can be risky—it’s a good idea to keep a backup in case beets
    # doesn’t do what you expect with your files.
    #
    # This option overrides copy, so enabling it will always move (and not copy) files.
    # The -c switch to the beet import command, however, still takes precedence.
    move: yes
    # One of apply, skip, asis, or none, indicating which option
    # should be the default when selecting an action for a given match.
    # This is the action that will be taken when you type return without an option letter.
    # The default is apply.
    default_action: skip


match:
    strong_rec_thresh: 0.05


plugins:
    # Autotagger Extensions
    - chroma        # Use acoustic fingerprinting for files with missing/incorrect metadata
    - discogs       # Search for releases in the Discogs database
    - fromfilename  # Guess metadata for untagged tracks from their filenames

    # Metadata
    - acousticbrainz  # Fetch various AcousticBrainz metadata
    - edit            # Edit metadata from a text editor
    # - embedart        # Embed album art images into files' metadata
    - fetchart        # Fetch album cover art from various sources
    - lastgenre       # Fetch genres based on Last.fm tags
    - lastimport      # Collect play counts from Last.fm
    - lyrics          # Automatically fetch song lyrics
    - mbsync          # Fetch updated metadata from MusicBrainz
    # - replaygain      # Calculate volume normalization for players that support it
    - scrub           # Clean extraneous metadata from music files
    - zero            # Nullify fields by pattern or unconditionally

    # Path Formats
    # - the  # Move patterns in path formats (i.e., move "a" and "the" to the end)

    # Interoperability
    - badfiles       # Check audio file integrity
    - play           # Play beets queries in your music player
    # - playlist       # Use M3U playlists to query the beets library
    - smartplaylist  # Generate smart playlists based on beets queries
    - thumbnails     # Get thumbnails with the cover art on your album folders

    # Miscellaneous
    # - bpd            # A music player for beets library that emulates MPD
    - duplicates     # List duplicate tracks or albums
    - fuzzy          # Search albums and tracks with fuzzy string matching
    - info           # Print music files' tags to the console
    - spotify        # Create Spotify playlists from the Beets library
    - types          # Declare types for flexible attributes
    - web            # An experimental Web-based GUI for beets

    # ???
    # - permissions


chroma:
    auto: true


# discogs:
#     user_token:


fromfilename:
    auto: true


acousticbrainz:
    # Enable AcousticBrainz during beet import.
    # Default: yes.
    auto: true
    # Download AcousticBrainz data even for tracks that already have it.
    # Default: no.
    force: false
    # Which tags from the list above to set on your files.
    # Default: [] (all)
    tags: []


edit:
    # A space-separated list of item fields to include in the editor by default.
    # Default: track title artist album
    itemfields: track title artist album
    # The same when editing albums (with the -a option).
    # Default: album albumartist
    albumfields: album albumartist

fetchart:
    # Enable automatic album art fetching during import.
    # Default: yes.
    auto: true
    # Pick only trusted album art by ignoring filenames that do not contain
    # one of the keywords in cover_names.
    # Default: no.
    cautious: false
    # Prioritize images containing words in this list.
    # Default: cover front art album folder.
    cover_names: cover front art album folder
    # Only images with a width bigger or equal to minwidth
    # are considered as valid album art candidates.
    # Default: 0.
    minwidth: 0
    # A maximum image width to downscale fetched images if they are too big.
    # The resize operation reduces image width to at most maxwidth pixels.
    # The height is recomputed so that the aspect ratio is preserved.
    maxwidth: 600
    # Only images with a width:height ratio of 1:1 are considered as valid
    # album art candidates if set to yes. It is also possible to specify a certain
    # deviation to the exact ratio to still be considered valid.
    # This can be done either in pixels (enforce_ratio: 10px) or
    # as a percentage of the longer edge (enforce_ratio: 0.5%).
    # Default: no.
    enforce_ratio: false
    # List of sources to search for images. An asterisk * expands to all available sources.
    # Default: filesystem coverart itunes amazon albumart,
    #          i.e., everything but wikipedia, google and fanarttv.
    #          Enable those sources for more matches at the cost of some speed.
    #          They are searched in the given order, thus in the default config,
    #          no remote (Web) art source are queried if local art is found
    #          in the filesystem.
    #          To use a local image as fallback, move it to the end of the list.
    #          For even more fine-grained control over the search order,
    #          see the section on Album Art Sources below.
    sources: filesystem coverart itunes amazon albumart wikipedia google fanarttv
    # Your Google API key (to enable the Google Custom Search backend).
    # Default: None.
    google_key: null
    # The custom search engine to use.
    # Default: The beets custom search engine, which searches the entire web.
    google_engine: 001442825323518660753:hrh5ch1gjzm
    # The personal API key for requesting art from fanart.tv. See below.
    fanarttv_key: null
    # If enabled, fetchart stores the artwork’s source in a flexible tag named art_source.
    # See below for the rationale behind this.
    # Default: no.
    store_source: false


lastgenre:
    # Fetch genres automatically during import.
    # Default: yes.
    auto: true
    # Use a canonicalization tree. Setting this to yes will use a built-in
    # tree. You can also set it to a path, like the whitelist config value, to
    # use your own tree.
    # Default: no (disabled).
    canonical: true
    # Number of genres to fetch.
    # Default: 1
    count: 7
    # A string if to use a fallback genre when no genre is found. You can use
    # the empty string '' to reset the genre.
    # Default: None.
    fallback: null
    # By default, beets will always fetch new genres, even if the files already
    # have one. To instead leave genres in place in when they pass the
    # whitelist, set the force option to no.
    # Default: yes.
    force: true
    # Minimum popularity factor below which genres are discarded.
    # Default: 10.
    min_weight: 10
    # Sort genres by the most to least specific, rather than most to least
    # popular.
    # Default: no.
    prefer_specific: false
    # Which entity to look up in Last.fm. Can be either artist, album or track.
    # Default: album.
    source: track
    # A separator for multiple genres.
    # Default: ', '.
    separator: ', '
    # The filename of a custom genre list, yes to use the internal whitelist,
    # or no to consider all genres valid.
    # Default: yes.
    whitelist: true


lastfm:
    user: Nowhere_to_Go
    # The number of tracks to request from the API at once.
    # Default: 500.
    per_page: 500
    # How many times should we re-send requests to Last.fm on failure?
    # Default: 3.
    retry_limit: 3


lyrics:
    # Fetch lyrics automatically during import.
    # Default: yes.
    auto: false  # fails sometimes
    # Your Bing Translation application password (to Activate On-the-Fly
    # Translation)
    bing_client_secret: null
    # By default all lyrics with a language other than bing_lang_to are
    # translated. Use a list of lang codes to restrict the set of source
    # languages to translate.
    # Default: []
    bing_lang_from: []
    # Language to translate lyrics into.
    # Default: None.
    bing_lang_to: null
    # By default, the file will be left unchanged when no lyrics are found. Use the empty string '' to reset the lyrics in such a case.
    # Default: None.
    fallback: null
    # By default, beets won’t fetch lyrics if the files already have ones. To instead always fetch lyrics, set the force option to yes.
    # Default: no.
    force: false
    # Your Google API key (to enable the Google Custom Search backend).
    # Default: None.
    google_API_key: null
    # The custom search engine to use.
    # Default: The beets custom search engine, which gathers an updated list
    # of sources known to be scrapeable.
    # google_engine_ID:
    # List of sources to search for lyrics. An asterisk * expands to all
    # available sources.
    # Default: google lyricwiki musixmatch genius, i.e., all the available
    # sources. The google source will be automatically deactivated if no
    # google_API_key is setup. Both it and the genius source will only be
    # enabled if BeautifulSoup is installed.
    sources: google lyricwiki musixmatch  # genius


scrub:
    auto: true


zero:
    fields: month day comments
    comments: [EAC, LAME, from.+collection, 'ripped by']
    update_database: true


badfiles:
    commands:
        # ogg: myoggchecker --opt1 --opt2
        flac: flac --test --warnings-as-errors --silent


play:
    # The command used to open the playlist.
    # Insert $args to use the --args feature.
    # Default: open on OS X
    #          xdg-open on other Unixes
    #          start on Windows
    command: mpv --vid=no


smartplaylist:
    # Regenerate the playlist after every database change.
    # Default: yes.
    auto: true
    # Where to put the generated playlist files.
    # Default: The current working directory (i.e., '.').
    playlist_dir: ~/.config/cmus/playlists
    # Generate paths in the playlist files relative to a base directory.
    # If you intend to use this plugin to generate playlists for MPD,
    # point this to your MPD music directory.
    # Default: Use absolute paths.
    relative_to: null
    #
    playlists:
        - name: all.m3u
          query: ''
        # - name: beatles.m3u
        #   query: 'artist:Beatles'


thumbnails:
    # Whether the thumbnail should be automatically set on import.
    # Default: yes.
    auto: false
    # Generate the thumbnail even when there’s one that seems fine
    # (more recent than the cover art).
    # Default: no.
    force: false
    # Generate dolphin-compatible thumbnails.Dolphin (KDE file explorer)
    # does not respect freedesktop.org’s standard on thumbnails.
    # This functionality replaces the Freedesktop Plugin
    # Default: no
    dolphin: false


duplicates:
    # List duplicate albums instead of tracks.
    # Default: no.
    album: false
    # Use an arbitrary command to compute a checksum of items. This overrides
    # the keys option the first time it is run; however, because it caches the
    # resulting checksum as flexattrs in the database, you can use
    # --key=name_of_the_checksumming_program --key=any_other_keys (or set the
    # keys configuration option) the second time around.
    # Default: ffmpeg -i {file} -f crc -.
    checksum: "ffmpeg -i {file} -f crc -"
    # checksum: 'ffprobe -i {file} -show_entries "format_tags=Acoustid Id" -v quiet'
    # A destination base directory into which to copy matched items.
    # Default: none (disabled).
    copy: null
    # Print a count of duplicate tracks or albums in the format
    # $albumartist - $album - $title: $count (for tracks) or
    # $albumartist - $album: $count (for albums).
    # Default: no.
    count: false
    # Removes matched items from the library and from the disk.
    # Default: no
    delete: false
    # A specific format with which to print every track or album. This uses the
    # same template syntax as beets’ path formats. The usage is inspired by,
    # and therefore similar to, the list command.
    # Default: format_item
    format: format_item
    # List every track or album that has duplicates, not just the duplicates
    # themselves.
    # Default: no
    full: false
    # Define in which track or album fields duplicates are to be searched. By
    # default, the plugin uses the musicbrainz track and album IDs for this
    # purpose. Using the keys option (as a YAML list in the configuration file,
    # or as space-delimited strings in the command-line), you can extend this
    # behavior to consider other attributes.
    # Default: [mb_trackid, mb_albumid]
    keys: [mb_trackid, mb_albumid]
    # Merge duplicate items by consolidating tracks and-or metadata where
    # possible.
    # merge:
    # A destination base directory into which it will move matched items.
    # Default: none (disabled).
    move: null
    # Output the path instead of metadata when listing duplicates.
    # Default: no.
    path: false
    # Do not report duplicate matches if some of the attributes are not defined
    # (ie. null or empty).
    # Default: no
    strict: false
    # A key=value pair. The plugin will add a new key attribute with value
    # value as a flexattr to the database for duplicate items.
    # Default: no.
    tag: ''
    # Dictionary of lists of attributes keyed by items or albums to use when
    # choosing duplicates. By default, the tie-breaking procedure favors the
    # most complete metadata attribute set. If you would like to consider the
    # lower bitrates as duplicates, for example,
    # set tiebreak: items: [bitrate].
    # Default: {}.
    tiebreak: {}


fuzzy:
    # The "sensitivity" of the fuzzy match. A value of 1.0 will show only
    # perfect matches and a value of 0.0 will match everything.
    # Default: 0.7.
    threshold: 0.7
    # The character used to designate fuzzy queries. Default: ~, which may need
    # to be escaped in some shells.
    prefix: "~"


spotify:
    # One of the following:
    #   list: Print out the playlist as a list of links. This list can then
    #         be pasted in to a new or existing Spotify playlist.
    #   open: This mode actually sends a link to your default browser
    #         with instructions to open Spotify with the playlist you created.
    #         Until this has been tested on all platforms, it will remain optional.
    # Default: list.
    mode: list
    # A two-character country abbreviation, to limit results to that market.
    # Default: None.
    region_filter: null
    # List each lookup that does not return a Spotify ID
    # (and therefore cannot be added to a playlist).
    # Default: no.
    show_failures: false
    # How to choose the track if there is more than one identical result.
    # For example, there might be multiple releases of the same album.
    # The options are popularity and first (to just choose the first match returned).
    # Default: popularity.
    tiebreak: popularity
    # An array of regex transformations to perform on the track/album/artist fields
    # before sending them to Spotify. Can be useful for changing certain abbreviations,
    # like ft. -> feat. See the examples below.
    # Default: None.
    # regex: None
    # Penalty applied to Spotify matches during import.
    # Set to 0.0 to disable.
    # Default: 0.5.
    source_weight: 0.5


types:
    rating: int


web:
    # The server hostname. Set this to 0.0.0.0 to bind to all interfaces.
    # Default: Bind to 127.0.0.1.
    host: 127.0.0.1
    # The server port. Default: 8337.
    port: 8337
    # The CORS allowed origin (see Cross-Origin Resource Sharing (CORS), below).
    # Default: CORS is disabled.
    cors: false
    # Support credentials when using CORS (see Cross-Origin Resource Sharing
    # (CORS), below).
    # Default: CORS_SUPPORTS_CREDENTIALS is disabled.
    cors_supports_credentials: false
    # If true, enable reverse proxy support (see Reverse Proxy Support, below).
    # Default: false.
    reverse_proxy: false
    # If true, includes paths in item objects.
    # Default: false.
    include_paths: false
