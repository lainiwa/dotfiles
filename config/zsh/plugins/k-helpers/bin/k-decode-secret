#!/usr/bin/env zsh

set -o errexit  # exit on fail
set -o pipefail # catch errors in pipelines
set -o nounset  # exit on undeclared variable
# set -o xtrace    # trace execution


# Example:
# $ k-decode-secret -n quantor api-postgresql-password
k-decode-secret() {
    # Src:
    # * https://stackoverflow.com/questions/53315791/how-to-convert-a-json-response-into-yaml-in-bash
    local jq_query='
        del(.metadata | .creationTimestamp,
                        .ownerReferences,
                        .resourceVersion,
                        .uid
        ) | .data |= map_values(@base64d)
          | .stringData = .data | del(.data)
    '

    kubectl get secret --output json "$@" |

    if command -v gojq >/dev/null; then
        gojq --yaml-output "${jq_query}"

    elif command -v yq >/dev/null; then
        yq --yaml-output "${jq_query}"

    elif command -v jq yj >/dev/null; then
        jq --raw-output "${jq_query}" |yj -jy

    elif command -v jq python3 >/dev/null; then
        jq --raw-output "${jq_query}" |
        python3 -c 'import sys,yaml,json; print(yaml.dump(json.loads(sys.stdin.read())))'

    elif command -v jq >/dev/null; then
        local toYAML
        toYAML=$(cat <<-'EOF'
            def toYaml:
               def handleMultilineString($level):
                  reduce ([match("\n+"; "g")]                       # find groups of '\n'
                          | sort_by(-.offset))[] as $match
                         (.; .[0:$match.offset + $match.length] +
                             "\n\("    " * $level)" +               # add one extra '\n' for every group of '\n's. Add indention for each new line
                             .[$match.offset + $match.length:]);

               def toYamlString($level):
                  if type == "string"
                  then handleMultilineString($level)
                       | sub("'"; "''"; "g")           # escape single quotes
                       | "'\(.)'"                      # wrap in single quotes
                  else .
                  end;

               def _toYaml($level):
                  (objects | to_entries[] |
                      if (.value | type) == "array" then
                          "\(.key):", (.value | _toYaml($level))
                      elif (.value | type) == "object" then
                          "\(.key):", "\("    ")\(.value | _toYaml($level))"
                      else
                          "\(.key): \(.value | toYamlString($level))"
                      end
                  )
                  // (arrays | select(length > 0)[] | [_toYaml($level)] |
                      "  - \(.[0])", "\("    ")\(.[1:][])"
                  )
                  // .;

               _toYaml(1);

EOF
        )
        jq -r "${toYAML}${jq_query}|toYaml"

    else
        echo 'Cannot query JSON and convert to YAML:' >&2
        echo 'needs either gojq or yq or jq+yj or jq+python3 or jq (pure jq is a fallback)' >&2
        return 1

    fi
}

k-decode-secret "$@"
