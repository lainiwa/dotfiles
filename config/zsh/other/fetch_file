#!/usr/bin/env zsh

set -o errexit  # exit on fail
set -o pipefail # catch errors in pipelines
set -o nounset  # exit on undeclared variable
# set -o xtrace    # trace execution

URL=$1


PY_CMD="
import os
from six.moves.urllib.request import urlopen
resp = urlopen('${URL}')
obj = resp.read()
os.write(1, obj)
"


ssl_netcat() {
    local host=$1
    local route=$2

    request() {
        printf '%s\n%s\n%s\n\n' "GET ${route} HTTP/1.0" \
                                "Connection: close"     \
                                "Host: ${host}"
    }

    if (( ${+commands[ncat]} )); then
        request |ncat -C --ssl "${host}" 443

    elif (( ${+commands[socat]} )) && [[ "$(socat -V)" == *"WITH_OPENSSL 1"* ]]; then
        request |socat - "OPENSSL:${host}:443,verify=2"

    elif (( ${+commands[openssl]} )); then
        request |openssl s_client -quiet -verify_quiet -connect "${host}:443"

    elif (( ${+commands[ssl_client]} )); then
        request |ssl_client "${host}:443"

    elif (( ${+commands[gnutls-cli]} )); then
        request |gnutls-cli -p 443 "${host}"

    elif (( ${+commands[busybox]} )) && [[ "$(busybox --list)" == *ssl_client* ]]; then
        request |busybox ssl_client "${host}:443"

    fi
}


ssl_netcat_fetch() {
    local url=$1
    local no_proto=${url#http*://}
    local host=${no_proto%%/*}
    local route=${no_proto#"$host"}
          route=${route:-/}

    full_response=$(mktemp)
    ssl_netcat "${host}" "${route}" > "${full_response}"

    while read -r line; do
        if [[ ${line} =~ '^(L|l)ocation: ' ]]; then
            ssl_netcat_fetch "${line:10:-1}"
            break

        elif [[ ${line} == $'\r' ]]; then
            cat -
            break
        fi

    done < "$full_response"

}


if (( ${+commands[wget]} )); then
    wget --quiet --output-document - "${URL}"

elif (( ${+commands[wget]} )); then
    curl --silent --location "${URL}"

elif (( ${+commands[busybox]} )) && [[ "$(busybox --list)" == *wget* ]]; then
    wget --quiet --output-document - "${URL}"

elif (( ${+commands[busybox]} )) && [[ "$(busybox --list)" == *curl* ]]; then
    curl --silent --location "${URL}"

elif (( ${+commands[python]} )); then
    python -c "${PY_CMD}"

elif (( ${+commands[python3]} )); then
    python3 -c "${PY_CMD}"

elif (( ${+commands[python2]} )); then
    python2 -c "${PY_CMD}"

# HTTP::Tiny is a core module since Perl 5.14
elif (( ${+commands[perl]} )) && perl -e 'use 5.014;' 2>/dev/null; then
    perl -MHTTP::Tiny -e 'print HTTP::Tiny->new->get(shift)->{content}' -- "${URL}"

else
    ssl_netcat_fetch "${URL}"

fi
