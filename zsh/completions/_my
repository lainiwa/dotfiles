#compdef _my my

_my() {
    local line

    _arguments -C \
        "-h[Show help information]" \
        "--h[Show help information]" \
        "1: :($(my _list_functions))" \
        "*::arg:->args"

    case $line[1] in
    set_bg)
        _set_bg
        ;;
    save_4chan_thread_imgs)
        _save_4chan_thread_imgs
        ;;
    screenshot)
        _screenshot
        ;;
    graph_dependencies)
        _graph_dependencies
        ;;
    pastebin)
        _pastebin
        ;;
    install_package)
        _install_package
        ;;
    dependencies)
        _dependencies
        ;;
    esac

}

_set_bg() {
    local line

    _arguments -C \
        "1: :(disk reddit)" \
        "*::arg:->args"

    case $line[1] in
    *)
        _files -g "*.(jpg|jpeg|png)"
        ;;
    esac
}

_save_4chan_thread_imgs() {
    local -a commands

    if ((CURRENT == 2)); then
        local boards_json
        boards_json=$(curl --silent 'https://a.4cdn.org/boards.json')
        IFS=$'\n' commands=($(
            jq --raw-output '.boards | .[] | [.board, ":", .title] | add' <<<"${boards_json}"
        ))
        _describe -t commands 'boards' commands
    fi

    if ((CURRENT == 3)); then
        local board=${line[2]}
        local catalog_json
        catalog_json=$(curl --silent "https://a.4cdn.org/${board}/catalog.json")
        IFS=$'\n' commands=($(
            jq --raw-output '.[] | .threads | .[] | [(.no|tostring), if .sub then ":" else "" end, .sub] | add' <<<"${catalog_json}" |
            perl -MHTML::Entities -pe 'decode_entities($_);'
        ))
        _describe -t commands 'threads' commands
    fi

    return 0
}

_screenshot() {
    local -a commands
    commands=(
        'full:Shoot whole screen'
        'select:Select an area with mouse to shoot'
        'focused:Shoot focused window'
    )

    if ((CURRENT == 2)); then
        _describe -t commands 'commands' commands
    fi

    return 0
}

_graph_dependencies() {
    local -a commands
    commands=($(dpkg --get-selections | sed 's/\t.*//'))

    if ((CURRENT == 2)); then
        _describe -t commands 'commands' commands
    fi

    return 0
}

_pastebin() {
    local line

    _arguments -C \
        "-h[Show help information]" \
        "--help[Show help information]" \
        "-x[Insert download URL into clipboard]" \
        "--xclip[Insert download URL into clipboard]" \
        "-e[Ecrypt file with GPG]" \
        "--encrypt[Ecrypt file with GPG]" \
        "*::arg:->args"

    case $line[1] in
    *)
        _files
        ;;
    esac
}

_install_package() {
    local -a commands
    commands=(
        'autobench:HTTP benchmark tool'
        'remarkable:Markdown graphical editor'
        'cgo:Console non-curses gopher client'
        'tomb:Encrypt files'
        'tor-browser:A tor browser from git releases'
        'vte-ng:Enhanced vte terminal widget'
        'dfc:Report file system space usage information'
        'sent:Simple plaintext presentation tool'
        'docker-compose:Tool for defining and running multi-container Docker applications'
        'grv:Terminal interface for viewing git repositories'
        'icecat:A GNU version of Firefox browser'
    )

    if ((CURRENT == 2)); then
        _describe -t commands 'commands' commands
    fi

    return 0
}

_dependencies() {
    local -a commands
    commands=(
        'self:Dependencies found in current file'
        'posix:POSIX utils'
        'non-posix:Non-POSIX dependencies'
        'check:Notify if some dependency is missing'
    )

    if ((CURRENT == 2)); then
        _describe -t commands 'commands' commands
    fi

    return 0
}

_my "$@"
